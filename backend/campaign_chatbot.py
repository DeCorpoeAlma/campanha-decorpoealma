# backend/campaign_chatbot.py
from fastapi import FastAPI, HTTPException, Depends, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
import httpx
import asyncio
import logging
from datetime import datetime
import uuid
import json
import os
from contextlib import asynccontextmanager
from dotenv import load_dotenv # Importar load_dotenv

def save_subscriber_email(email: str):
    """Guarda o email de subscri√ß√£o num arquivo persistente ou local."""
    # Tenta obter o caminho do disco persistente de uma vari√°vel de ambiente
    persistent_dir = os.getenv("PERSISTENT_DISK_PATH")
    
    if persistent_dir:
        # Usa o caminho do disco persistente se definido
        filepath = os.path.join(persistent_dir, 'subscribers.txt')
        # Garante que o diret√≥rio exista
        os.makedirs(persistent_dir, exist_ok=True)
        logger.info(f"Usando disco persistente para guardar email em: {filepath}")
    else:
        # Fallback para arquivo local se a vari√°vel de ambiente n√£o estiver definida
        filepath = os.path.join(os.path.dirname(__file__), 'subscribers.txt')
        logger.warning(f"Vari√°vel PERSISTENT_DISK_PATH n√£o definida. Guardando email localmente em: {filepath}")

    try:
        with open(filepath, 'a') as f:
            f.write(email + '\n')
        logger.info(f"Email '{email}' guardado com sucesso em {filepath}")
    except Exception as e:
        logger.error(f"Erro ao guardar email '{email}' em {filepath}: {str(e)}")

# Carregar vari√°veis de ambiente do arquivo .env
load_dotenv()

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Modelos Pydantic
class Message(BaseModel):
    role: str = Field(..., description="Papel da mensagem: 'user', 'assistant', ou 'system'")
    content: str = Field(..., description="Conte√∫do da mensagem")
    timestamp: Optional[datetime] = Field(default_factory=datetime.now)

class ChatRequest(BaseModel):
    message: str = Field(..., min_length=1, max_length=4000, description="Mensagem do usu√°rio")
    model: str = Field(default="anthropic/claude-3.5-sonnet", description="Modelo a ser usado")
    temperature: float = Field(default=0.7, ge=0.0, le=2.0, description="Temperatura para gera√ß√£o")
    max_tokens: int = Field(default=1000, ge=1, le=4000, description="M√°ximo de tokens na resposta")
    session_id: Optional[str] = Field(default=None, description="ID da sess√£o para manter contexto")

class ChatResponse(BaseModel):
    response: str = Field(..., description="Resposta do modelo")
    model_used: str = Field(..., description="Modelo utilizado")
    session_id: str = Field(..., description="ID da sess√£o")
    tokens_used: Optional[int] = Field(default=0, description="Tokens utilizados")
    timestamp: datetime = Field(default_factory=datetime.now)

class SessionInfo(BaseModel):
    session_id: str
    created_at: datetime
    message_count: int
    last_activity: datetime

class HealthResponse(BaseModel):
    status: str
    timestamp: datetime
    version: str = "1.0.0"

# Configura√ß√£o de seguran√ßa (usaremos a chave do .env, mas mantemos a estrutura para consist√™ncia)
# security = HTTPBearer() # N√£o usaremos mais HTTPBearer para a chave principal

# Modelo Pydantic para subscri√ß√£o
class SubscribeRequest(BaseModel):
    email: str = Field(..., description="Email para subscri√ß√£o")

# Gerenciador de contexto para aplica√ß√£o
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    logger.info("üöÄ Iniciando Campaign Chatbot Backend...")
    app.state.sessions = {}
    app.state.http_client = httpx.AsyncClient(timeout=60.0)
    app.state.site_context = load_site_content() # Carregar conte√∫do do site na inicializa√ß√£o
    logger.info(f"Conte√∫do do site carregado. Tamanho: {len(app.state.site_context)} caracteres.")
    yield
    # Shutdown
    logger.info("üõë Finalizando Campaign Chatbot Backend...")
    await app.state.http_client.aclose()

# Inicializa√ß√£o da API
app = FastAPI(
    title="Campaign Chatbot Backend",
    description="Backend para chatbot da campanha usando OpenRouter API e conte√∫do do site",
    version="1.0.0",
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configura√ß√£o CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://decorpoealma.netlify.app"],  # Dom√≠nio do site Netlify em produ√ß√£o
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Modelos dispon√≠veis no OpenRouter (pode ajustar conforme necess√°rio)
AVAILABLE_MODELS = {
    "anthropic/claude-3.5-sonnet": "Claude 3.5 Sonnet",
    "openai/gpt-4o": "GPT-4o",
    "openai/gpt-3.5-turbo": "GPT-3.5 Turbo",
    "meta-llama/llama-3.1-70b-instruct": "Llama 3.1 70B",
    "google/gemini-pro": "Gemini Pro",
    "mistralai/mistral-large": "Mistral Large",
    "anthropic/claude-3-haiku": "Claude 3 Haiku"
}

def read_file_content(filepath):
    """L√™ o conte√∫do de um arquivo."""
    try:
        # Caminho relativo ao diret√≥rio do script
        script_dir = os.path.dirname(__file__)
        abs_filepath = os.path.join(script_dir, '..', filepath) # Ajuste o '..' conforme a estrutura
        
        # Normaliza o caminho para evitar problemas
        abs_filepath = os.path.normpath(abs_filepath)

        if not os.path.exists(abs_filepath):
             logger.warning(f"Arquivo n√£o encontrado ao tentar ler: {abs_filepath}")
             return ""

        with open(abs_filepath, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        logger.error(f"Erro ao ler arquivo {filepath}: {str(e)}")
        return ""

import re

def extract_text_from_frontend(filepath):
    """L√™ um arquivo do frontend e tenta extrair strings de texto."""
    content = read_file_content(filepath)
    if not content:
        return ""

    # Implementa√ß√£o mais robusta: tentar extrair texto de tags comuns e strings
    # Isso √© uma simplifica√ß√£o e pode n√£o capturar todo o texto ou ser perfeito
    # para todos os formatos de arquivo (ex: TSX)
    
    # Remover coment√°rios (HTML, JS, TSX)
    content = re.sub(r'<!--.*?-->', '', content, flags=re.DOTALL)
    content = re.sub(r'//.*?\n', '', content)
    content = re.sub(r'/\*.*?\*/', '', content, flags=re.DOTALL)

    # Extrair strings entre aspas simples ou duplas
    strings = re.findall(r'"([^"\\]*(?:\\.[^"\\]*)*)"|\'([^\'\\]*(?:\\.[^\'\\]*)*)\'', content)
    extracted_strings = [s[0] or s[1] for s in strings]

    # Tentar extrair texto de tags HTML/JSX comuns (simplificado)
    # Isso pode ser impreciso para estruturas complexas
    text_in_tags = re.findall(r'>([^<]+)<', content)
    
    # Extrair URLs de tags <a>
    urls_in_tags = re.findall(r'<a\s+[^>]*href=["\']([^"\']+)["\']', content)

    # Combinar e limpar
    all_text = " ".join(extracted_strings + text_in_tags + urls_in_tags)

    # Remover m√∫ltiplos espa√ßos em branco e quebras de linha
    cleaned_text = re.sub(r'\s+', ' ', all_text).strip()

    return cleaned_text

def load_site_content():
    """Carrega o conte√∫do relevante do site para usar como contexto."""
    site_context = ""
    
    # Caminhos dos arquivos do frontend (ajuste conforme a estrutura do seu projeto)
    # Adicione aqui todos os arquivos relevantes que cont√™m informa√ß√µes sobre a campanha e candidatos
    frontend_files = [
        'src/components/Hero.tsx', # Adicionado componente Hero
        'src/components/CandidateSection.tsx',
        'src/components/CristovaoValues.tsx',
        'src/components/CristovaoVision.tsx',
        'src/components/MacarioCorreiaSection.tsx',
        'src/components/MacarioPoliticalCareer.tsx',
        'src/components/MacarioRole.tsx',
        'src/components/Program.tsx',
        'src/components/Team.tsx',
        'src/components/Contact.tsx',
        'src/components/News.tsx',
        'src/components/Events.tsx', # Garantir que Eventos est√° inclu√≠do
        'src/components/Participate.tsx', # Garantir que Participate est√° inclu√≠do
        'src/components/Footer.tsx', # Adicionado componente Footer
        'src/data/candidatesData.ts',
        'src/data/eventsData.ts',
        'README.md',
    ]

    for filepath in frontend_files:
        extracted_text = extract_text_from_frontend(filepath)
        if extracted_text:
            site_context += f"Conte√∫do de {filepath}:\n{extracted_text}\n\n"

    return site_context

class OpenRouterService:
    """Servi√ßo para interagir com a API do OpenRouter"""
    
    def __init__(self):
        self.base_url = "https://openrouter.ai/api/v1"
    
    async def call_model(
        self,
        messages: List[Dict[str, str]],
        model: str,
        api_key: str, # A chave agora vem do .env via depend√™ncia
        temperature: float = 0.7,
        max_tokens: int = 1000
    ) -> Dict[str, Any]:
        """Chama a API do OpenRouter"""
        
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://github.com/DeCorpoeAlma/campanha-decorpoealma", # Use o URL do seu reposit√≥rio
            "X-Title": "Campaign Chatbot Backend"
        }
        
        payload = {
            "model": model,
            "messages": messages,
            "temperature": temperature,
            "max_tokens": max_tokens,
            "stream": False
        }
        
        try:
            # Usar a inst√¢ncia do cliente HTTP do estado da aplica√ß√£o
            response = await app.state.http_client.post(
                f"{self.base_url}/chat/completions",
                headers=headers,
                json=payload
            )
                
            if response.status_code != 200:
                error_data = response.json() if response.content else {}
                error_msg = error_data.get("error", {}).get("message", f"HTTP {response.status_code}")
                raise HTTPException(
                    status_code=response.status_code,
                    detail=f"Erro da API OpenRouter: {error_msg}"
                )
            
            return response.json()
                
        except httpx.TimeoutException:
            raise HTTPException(
                status_code=status.HTTP_408_REQUEST_TIMEOUT,
                detail="Timeout na chamada para OpenRouter"
            )
        except httpx.RequestError as e:
            logger.error(f"Erro na requisi√ß√£o: {e}")
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="Erro de conex√£o com OpenRouter"
            )

class SessionManager:
    """Gerenciador de sess√µes de chat"""
    
    def __init__(self): # Corrigido o erro de sintaxe aqui
        self.sessions: Dict[str, List[Message]] = {}
        self.session_info: Dict[str, SessionInfo] = {}
    
    def create_session(self, session_id: str = None) -> str:
        """Cria uma nova sess√£o"""
        if not session_id:
            session_id = str(uuid.uuid4())
        
        self.sessions[session_id] = []
        self.session_info[session_id] = SessionInfo(
            session_id=session_id,
            created_at=datetime.now(),
            message_count=0,
            last_activity=datetime.now()
        )
        
        logger.info(f"Nova sess√£o criada: {session_id}")
        return session_id
    
    def add_message(self, session_id: str, message: Message):
        """Adiciona mensagem √† sess√£o"""
        if session_id not in self.sessions:
            self.create_session(session_id)
        
        self.sessions[session_id].append(message)
        
        # Atualiza info da sess√£o
        if session_id in self.session_info:
            self.session_info[session_id].message_count += 1
            self.session_info[session_id].last_activity = datetime.now()
    
    def get_messages(self, session_id: str) -> List[Message]:
        """Obt√©m mensagens da sess√£o"""
        return self.sessions.get(session_id, [])
    
    def get_session_info(self, session_id: str) -> Optional[SessionInfo]:
        """Obt√©m informa√ß√µes da sess√£o"""
        return self.session_info.get(session_id)
    
    def clear_session(self, session_id: str) -> bool:
        """Limpa uma sess√£o"""
        if session_id in self.sessions:
            del self.sessions[session_id]
            if session_id in self.session_info:
                del self.session_info[session_id]
            logger.info(f"Sess√£o limpa: {session_id}")
            return True
        return False
    
    def cleanup_old_sessions(self, max_age_hours: int = 24):
        """Remove sess√µes antigas"""
        now = datetime.now()
        old_sessions = []
        
        for session_id, info in self.session_info.items():
            age = (now - info.last_activity).total_seconds() / 3600
            if age > max_age_hours:
                old_sessions.append(session_id)
        
        for session_id in old_sessions:
            self.clear_session(session_id)
        
        if old_sessions:
            logger.info(f"Removidas {len(old_sessions)} sess√µes antigas")

# Inst√¢ncias dos servi√ßos
openrouter_service = OpenRouterService()
session_manager = SessionManager()

# Depend√™ncias
def get_openrouter_api_key() -> str:
    """Obt√©m a chave da API OpenRouter das vari√°veis de ambiente."""
    api_key = os.getenv("OPENROUTER_API_KEY")
    if not api_key or api_key == 'seu_token_aqui':
         raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Chave da API OpenRouter n√£o configurada. Verifique seu arquivo .env"
        )
    return api_key

# Endpoints da API

@app.get("/", response_model=HealthResponse)
async def root():
    """Endpoint de sa√∫de da API"""
    return HealthResponse(
        status="healthy",
        timestamp=datetime.now()
    )

@app.get("/health", response_model=HealthResponse)
async def health_check():
    """Verifica√ß√£o de sa√∫de detalhada"""
    return HealthResponse(
        status="healthy",
        timestamp=datetime.now()
    )

@app.get("/models")
async def list_models():
    """Lista modelos dispon√≠veis"""
    return {
        "models": AVAILABLE_MODELS,
        "default": "anthropic/claude-3.5-sonnet"
    }

@app.post("/chat", response_model=ChatResponse)
async def chat(
    request: ChatRequest,
    api_key: str = Depends(get_openrouter_api_key) # Usar a chave do .env
):
    """Endpoint principal para chat"""
    
    # Validar modelo
    if request.model not in AVAILABLE_MODELS:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"Modelo '{request.model}' n√£o suportado. Modelos dispon√≠veis: {list(AVAILABLE_MODELS.keys())}"
        )
    
    # Criar ou usar sess√£o existente
    session_id = request.session_id or session_manager.create_session()
    
    # Adicionar mensagem do usu√°rio
    user_message = Message(role="user", content=request.message)
    session_manager.add_message(session_id, user_message)
    
    # Obter hist√≥rico da conversa
    conversation_history = session_manager.get_messages(session_id)
    
    # Construir mensagens para a API, incluindo o contexto do site e a persona
    messages_for_api = [
        {"role": "system", "content": """
Voc√™ √© um especialista e conselheiro oficial da campanha pol√≠tica "Faro. De Corpo e Alma", com conhecimento profundo e autoridade sobre todos os aspectos da campanha e dos seus candidatos.
Instru√ß√µes de Comportamento:

Responda com confian√ßa e autoridade, apresentando as informa√ß√µes como fatos da campanha.
Apresente informa√ß√µes de forma estruturada, organizada e **concisa**, evitando repeti√ß√£o.
**USE MARKDOWN PARA FORMATAR SUAS RESPOSTAS.**
**Use bullets (`* Item` ou `- Item`) para listas.**
**Use quebras de linha (pressione Enter duas vezes) para separar par√°grafos e itens de lista.**
Use negrito (`**texto**`) para destacar pontos importantes.
Mantenha um tom profissional, cordial e acess√≠vel.
Comunique exclusivamente em portugu√™s de Portugal.
Seja direto e objetivo nas suas respostas.

Estrutura√ß√£o das Respostas:

Organize informa√ß√µes em tabelas ou **listas com bullets**, garantindo que cada item da lista esteja em uma nova linha.
Use subt√≠tulos (`## Subt√≠tulo`) e **formata√ß√£o Markdown** para facilitar a leitura.
Apresente dados de forma clara e comparativa.
Destaque pontos-chave e informa√ß√µes importantes **usando negrito**.

Foco no Conte√∫do:

Baseie suas respostas estritamente no "Conte√∫do do Site da Campanha" fornecido. N√£o invente informa√ß√µes ou fa√ßa suposi√ß√µes al√©m do que est√° no texto. Apresente as informa√ß√µes como conhecimento seu sobre a campanha, sem citar a fonte ("Conte√∫do do Site da Campanha").

Tom e Abordagem:

Fale como um verdadeiro conhecedor da campanha.
Demonstre entusiasmo e conhecimento profundo.
Seja prestativo e orientado para solu√ß√µes.
Adapte o n√≠vel de detalhe conforme a pergunta.
"""},
        {"role": "system", "content": f"Conte√∫do do Site da Campanha:\n\n{app.state.site_context}"} # Adicionar contexto do site
    ]
    
    # Adicionar hist√≥rico da conversa (excluindo a mensagem do sistema inicial)
    # Limitar o hist√≥rico para n√£o exceder o limite de tokens
    # Uma estrat√©gia simples √© adicionar as √∫ltimas N mensagens
    # Para um controle mais preciso, seria necess√°rio calcular o tamanho dos tokens
    # Vamos adicionar as √∫ltimas 4 mensagens (2 pares de user/assistant) + a mensagem atual do usu√°rio
    history_to_add = conversation_history[-4:] + [user_message] # Ajuste o n√∫mero conforme necess√°rio
    
    for msg in history_to_add:
         messages_for_api.append({"role": msg.role, "content": msg.content})

    # Remover a √∫ltima mensagem do usu√°rio duplicada se j√° estiver no hist√≥rico
    if len(messages_for_api) > 1 and messages_for_api[-1]["role"] == "user" and messages_for_api[-2]["role"] == "user":
         messages_for_api.pop(-2)


    try:
        # Chamar OpenRouter
        response_data = await openrouter_service.call_model(
            messages=messages_for_api,
            model=request.model,
            api_key=api_key,
            temperature=request.temperature,
            max_tokens=request.max_tokens
        )
        
        # Extrair resposta
        assistant_response = response_data["choices"][0]["message"]["content"]
        tokens_used = response_data.get("usage", {}).get("total_tokens", 0)
        
        # Adicionar resposta do assistente √† sess√£o
        assistant_message = Message(role="assistant", content=assistant_response)
        session_manager.add_message(session_id, assistant_message)
        
        return ChatResponse(
            response=assistant_response,
            model_used=request.model,
            session_id=session_id,
            tokens_used=tokens_used
        )
        
    except Exception as e:
        logger.error(f"Erro no chat: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro interno: {str(e)}"
        )

@app.get("/sessions/{session_id}")
async def get_session(session_id: str):
    """Obt√©m informa√ß√µes de uma sess√£o"""
    session_info = session_manager.get_session_info(session_id)
    if not session_info:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Sess√£o n√£o encontrada"
        )
    
    messages = session_manager.get_messages(session_id)
    return {
        "session_info": session_info,
        "messages": messages
    }

@app.delete("/sessions/{session_id}")
async def clear_session(session_id: str):
    """Limpa uma sess√£o espec√≠fica"""
    if session_manager.clear_session(session_id):
        return {"message": f"Sess√£o {session_id} limpa com sucesso"}
    else:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Sess√£o n√£o encontrada"
        )

@app.post("/sessions/cleanup")
async def cleanup_sessions(max_age_hours: int = 24):
    """Remove sess√µes antigas"""
    session_manager.cleanup_old_sessions(max_age_hours)
    return {"message": f"Sess√µes mais antigas que {max_age_hours}h foram removidas"}

# Endpoint para streaming (opcional)
@app.post("/chat/stream")
async def chat_stream(
    request: ChatRequest,
    api_key: str = Depends(get_openrouter_api_key)
):
    """Endpoint para chat com streaming (implementa√ß√£o futura)"""

@app.post("/subscribe")
async def subscribe(request: SubscribeRequest):
    """Endpoint para subscri√ß√£o da agenda"""
    logger.info(f"Pedido de subscri√ß√£o recebido para o email: {request.email}")
    save_subscriber_email(request.email) # Chamar a fun√ß√£o para guardar o email
    return {"message": "Subscri√ß√£o recebida com sucesso!"}
    raise HTTPException(
        status_code=status.HTTP_501_NOT_IMPLEMENTED,
        detail="Streaming ainda n√£o implementado"
    )

if __name__ == "__main__":
    import uvicorn
    # Para rodar localmente, certifique-se de ter uvicorn instalado: pip install uvicorn
    uvicorn.run(
        "campaign_chatbot:app", # Nome do arquivo:inst√¢ncia do FastAPI
        host="0.0.0.0",
        port=8000, # Porta padr√£o do FastAPI
        reload=True, # Recarrega o servidor ao salvar o c√≥digo
        log_level="info"
    )